import re
import torch
import logging
import requests
import joblib
import torch.nn.functional as F
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from transformers import BertTokenizer, BertForSequenceClassification


TOKEN = "7820899741:AAHFSmAJQDXHaStcR9VXBgwotvNJyrgzxCE"
DEEPL_API_KEY = "45be946e-5438-437f-be2a-7bb839a54eeb:fx"

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


MODEL_PATH_1 = "./bert_training/final_training/bert_disease_model"
MODEL_PATH_2 = "./bert_training/kaggle_training/bert_disease_model"
MODEL_PATH_3 = "./bert_training/reddit_training/bert_disease_model"


model_1 = BertForSequenceClassification.from_pretrained(MODEL_PATH_1).to(device)
model_2 = BertForSequenceClassification.from_pretrained(MODEL_PATH_2).to(device)
model_3 = BertForSequenceClassification.from_pretrained(MODEL_PATH_3).to(device)

tokenizer_1 = BertTokenizer.from_pretrained(MODEL_PATH_1)
tokenizer_2 = BertTokenizer.from_pretrained(MODEL_PATH_2)
tokenizer_3 = BertTokenizer.from_pretrained(MODEL_PATH_3)

le_1 = joblib.load(f"{MODEL_PATH_1}/label_encoder.joblib")
le_2 = joblib.load(f"{MODEL_PATH_2}/label_encoder.joblib")
le_3 = joblib.load(f"{MODEL_PATH_3}/label_encoder.joblib")


logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


def translate_to_english(text: str) -> str:
    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": DEEPL_API_KEY,
        "text": text,
        "source_lang": "RU",
        "target_lang": "EN"
    }
    try:
        response = requests.post(url, data=params)
        response.raise_for_status()
        return response.json()["translations"][0]["text"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (RU->EN): {e}")
        return text

def translate_to_russian(text: str) -> str:
    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": DEEPL_API_KEY,
        "text": text,
        "target_lang": "RU"
    }
    try:
        response = requests.post(url, data=params)
        response.raise_for_status()
        return response.json()["translations"][0]["text"]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (EN->RU): {e}")
        return text


def preprocess_text(text: str) -> str:
    return re.sub(r"[^\w\s,]", "", text).strip()


def predict_disease(symptoms: str, model, tokenizer, label_encoder, top_n: int = 3) -> str:
    model.eval()
    inputs = tokenizer(symptoms, return_tensors="pt", truncation=True, padding="max_length", max_length=128)
    inputs = {k: v.to(device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model(**inputs)

    probs = F.softmax(outputs.logits, dim=1)
    top_probs, top_indices = torch.topk(probs, top_n, dim=1)

    predictions = []
    for prob, idx in zip(top_probs[0], top_indices[0]):
        disease = label_encoder.inverse_transform([idx.cpu().item()])[0]
        predictions.append(f"{disease}: {round(prob.item() * 100, 2)}%")

    return "\n".join(predictions)


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/help", description="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/diseases", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ–ª–µ–∑–Ω–µ–π")
    ]
    await bot.set_my_commands(commands)

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –ø–æ–∫–∞–∂—É –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã."
    )

@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "–∂–∞–∂–¥–∞, –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å\n"
        "–Ø –ø–µ—Ä–µ–≤–µ–¥—É –∏ –æ–ø—Ä–µ–¥–µ–ª—é –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏."
    )

@dp.message(Command("diseases"))
async def list_diseases(message: Message):
    diseases_text = """
üìã –ë–æ–ª–µ–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–æ–¥–µ–ª—å:
- (–≤–µ—Ä—Ç–∏–≥–æ) –ø–∞—Ä–æ–∫—Å–∏–∑–º–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ
- –∞–∫–Ω–µ
- –°–î–í–ì
- –°–ü–ò–î
- –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –≥–µ–ø–∞—Ç–∏—Ç
- –∞–ª–ª–µ—Ä–≥–∏—è
- —Ç—Ä–µ–≤–æ–≥–∞
- –∞—Ä–∏—Ç–º–∏—è
- –∞—Ä—Ç—Ä–∏—Ç
- —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞—É—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
- –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
- –±—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–∞—è –∞—Å—Ç–º–∞
- —Ü–µ–ª–∏–∞–∫–∏—è
- —à–µ–π–Ω—ã–π —Å–ø–æ–Ω–¥–∏–ª–µ–∑
- –≤–µ—Ç—Ä—è–Ω–∞—è –æ—Å–ø–∞
- —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Ö–æ–ª–µ—Å—Ç–∞–∑
- —Å–∏–Ω–¥—Ä–æ–º —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏
- –ø—Ä–æ—Å—Ç—É–¥–∞
- –∫–æ–≤–∏–¥-19
- –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ –¥–µ–Ω–≥–µ
- –¥–µ–ø—Ä–µ—Å—Å–∏—è
- –¥–∏–∞–±–µ—Ç
- –¥–∏–º–æ—Ä—Ñ–Ω—ã–π –≥–µ–º–º–æ—Ä—Ä–æ–π (—Å–≤–∞–∏)
- –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
- —ç–∫–∑–µ–º–∞
- —ç–Ω–¥–æ–º–µ—Ç—Ä–∏–æ–∑
- —Ñ–∏–±—Ä–æ–º–∏–∞–ª–≥–∏—è
- –≥—Ä–∏–±–∫–æ–≤–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è
- –≥–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–∏—Ç
- –≥–∞—Ä–¥
- –∏–Ω—Ñ–∞—Ä–∫—Ç
- –≥–µ–ø–∞—Ç–∏—Ç a
- –≥–µ–ø–∞—Ç–∏—Ç b
- –≥–µ–ø–∞—Ç–∏—Ç c
- –≥–µ–ø–∞—Ç–∏—Ç d
- –≥–µ–ø–∞—Ç–∏—Ç e
- –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è
- –≥–∏–ø–µ—Ä—Ç–∏—Ä–µ–æ–∑
- –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏—è
- –≥–∏–ø–æ—Ç–∏—Ä–µ–æ–∑
- –≥–∏–ø–æ–≤–æ–ª–µ–º–∏—á–µ—Å–∫–∏–π —à–æ–∫
- –∏–º–ø–µ—Ç–∏–≥–æ
- –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞
- –∂–µ–ª—Ç—É—Ö–∞
- –º–∞–ª—è—Ä–∏—è
- –∫–ª–∏–º–∞–∫—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–¥—Ä–æ–º
- –º–∏–≥—Ä–µ–Ω—å
- —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–∫–ª–µ—Ä–æ–∑ xml-ph-0024 –æ–∂–∏—Ä–µ–Ω–∏–µ
- –û–ö–†
- –æ—Å—Ç–µ–æ–∞—Ä—Ç—Ä–∏—Ç
- –ø–∞—Ä–∞–ª–∏—á (–∫—Ä–æ–≤–æ–∏–∑–ª–∏—è–Ω–∏–µ –≤ –º–æ–∑–≥)
- —è–∑–≤–µ–Ω–Ω–∞—è –±–æ–ª–µ–∑–Ω—å
- –ø–Ω–µ–≤–º–æ–Ω–∏—è
- –ø—Å–æ—Ä–∏–∞–∑
- –ø—Å–æ—Ä–∏–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç
- –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
- –∏–Ω—Å—É–ª—å—Ç
- –Ω–∞—Ä–∫–æ–º–∞–Ω–∏—è
- —Ç—É–±–µ—Ä–∫—É–ª–µ–∑
- –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞
- –±—Ä—é—à–Ω–æ–π —Ç–∏—Ñ
- –∏–Ω—Ñ–µ–∫—Ü–∏—è –º–æ—á–µ–≤—ã–≤–æ–¥—è—â–∏—Ö –ø—É—Ç–µ–π
- –≤–∞—Ä–∏–∫–æ–∑–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–µ–Ω
""".strip()
    await message.answer(diseases_text)


@dp.message()
async def symptoms_handler(message: Message):
    user_text = message.text.strip()

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∏–º–ø—Ç–æ–º—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")
        return

    symptoms_clean = preprocess_text(user_text)
    symptoms_en = translate_to_english(symptoms_clean)

    pred1 = predict_disease(symptoms_en, model_1, tokenizer_1, le_1)
    pred2 = predict_disease(symptoms_en, model_2, tokenizer_2, le_2)
    pred3 = predict_disease(symptoms_en, model_3, tokenizer_3, le_3)

    pred1_ru = translate_to_russian(pred1)
    pred2_ru = translate_to_russian(pred2)
    pred3_ru = translate_to_russian(pred3)

    final_response = f"""üìä <b>–û—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:</b>

üí° <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å:</b>
{pred1_ru}

üìÅ <b>Kaggle –º–æ–¥–µ–ª—å:</b>
{pred2_ru}

üß† <b>Reddit –º–æ–¥–µ–ª—å:</b>
{pred3_ru}
"""
    await message.answer(final_response)


async def main():
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
